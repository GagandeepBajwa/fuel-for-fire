!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AdaBoostClassifier	../classifier.py	/^from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier$/;"	kind:namespace	line:21
DecisionTreeClassifier	../classifier.py	/^from sklearn.tree import DecisionTreeClassifier$/;"	kind:namespace	line:20
GaussianNB	../classifier.py	/^from sklearn.naive_bayes import GaussianNB$/;"	kind:namespace	line:22
GaussianProcessClassifier	../classifier.py	/^from sklearn.gaussian_process import GaussianProcessClassifier$/;"	kind:namespace	line:18
K	../kmeans_clustering.py	/^K = 10$/;"	kind:variable	line:22
K	../kmeans_clustering_cli.py	/^    K = 10$/;"	kind:variable	line:101
KMeans	../kmeans_clustering.py	/^from sklearn.cluster import KMeans$/;"	kind:namespace	line:4
KMeans	../kmeans_clustering_cli.py	/^from sklearn.cluster import KMeans$/;"	kind:namespace	line:10
KNeighborsClassifier	../classifier.py	/^from sklearn.neighbors import KNeighborsClassifier$/;"	kind:namespace	line:16
LinearSVC	../classifier.py	/^from sklearn.svm import LinearSVC$/;"	kind:namespace	line:17
LinearSegmentedColormap	../kmeans_clustering.py	/^from matplotlib.colors import LinearSegmentedColormap$/;"	kind:namespace	line:2
LinearSegmentedColormap	../kmeans_clustering_cli.py	/^from matplotlib.colors import LinearSegmentedColormap$/;"	kind:namespace	line:8
MAX_K	../kmeans_clustering.py	/^MAX_K = 20$/;"	kind:variable	line:23
MAX_K	../kmeans_clustering_cli.py	/^    MAX_K = 20$/;"	kind:variable	line:105
MLPClassifier	../classifier.py	/^from sklearn.neural_network import MLPClassifier$/;"	kind:namespace	line:15
Pipeline	../classifier.py	/^from sklearn.pipeline import Pipeline$/;"	kind:namespace	line:26
QuadraticDiscriminantAnalysis	../classifier.py	/^from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis$/;"	kind:namespace	line:23
RBF	../classifier.py	/^from sklearn.gaussian_process.kernels import RBF$/;"	kind:namespace	line:19
RandomForestClassifier	../classifier.py	/^from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier$/;"	kind:namespace	line:21
SGDClassifier	../classifier.py	/^from sklearn.linear_model import SGDClassifier$/;"	kind:namespace	line:14
StandardScaler	../classifier.py	/^from sklearn.preprocessing import StandardScaler$/;"	kind:namespace	line:8
StratifiedKFold	../classifier.py	/^from sklearn.model_selection import StratifiedKFold$/;"	kind:namespace	line:24
X	../kmeans_clustering_cli.py	/^    X = img[:, :, :13].reshape(new_shape)$/;"	kind:variable	line:119
X_cluster	../kmeans_clustering_cli.py	/^    X_cluster = X_cluster.reshape(img[:, :, 0].shape)$/;"	kind:variable	line:125
X_cluster	../kmeans_clustering_cli.py	/^    X_cluster = k_means.labels_$/;"	kind:variable	line:124
band_select	../read_multispectral_cli.py	/^band_select = [3, 2, 1]$/;"	kind:variable	line:72
binaryImage	../read_multispectral.py	/^binaryImage = image + ".bin"$/;"	kind:variable	line:16
blending.py	../blending.py	1;"	kind:file	line:1
buildTrainingSet	../classifier.py	/^def buildTrainingSet(X_true, X_false, class_):$/;"	kind:function	line:144
c	../blending.py	/^c = cv2.waitKey(0)$/;"	kind:variable	line:19
classifier.py	../classifier.py	1;"	kind:file	line:1
clone	../classifier.py	/^from sklearn.base import clone$/;"	kind:namespace	line:25
cm	../blending.py	/^cm = cv2.imread(colorMapPath + mapImage, cv2.IMREAD_COLOR)$/;"	kind:variable	line:9
cm	../kmeans_clustering_cli.py	/^    cm = LinearSegmentedColormap.from_list($/;"	kind:variable	line:131
colorImage	../blending.py	/^colorImage = "2019-9-23-182326.png"$/;"	kind:variable	line:6
colorMapImagePath	../kmeans_clustering.py	/^colorMapImagePath = "..\/images\/colormap\/"$/;"	kind:variable	line:15
colorMapPath	../blending.py	/^colorMapPath = "..\/images\/colormap\/"$/;"	kind:variable	line:3
colors	../kmeans_clustering_cli.py	/^    colors = [(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 0, 1), (1, 1, 0),$/;"	kind:variable	line:128
confusion_matrix	../classifier.py	/^from sklearn.metrics import confusion_matrix$/;"	kind:namespace	line:11
convertBinary	../read_multispectral.py	/^def convertBinary():$/;"	kind:function	line:33
convertImagePath	../read_multispectral.py	/^convertImagePath = "..\/images\/converted\/"$/;"	kind:variable	line:14
convertPath	../blending.py	/^convertPath = "..\/images\/converted\/"$/;"	kind:variable	line:4
createColorMap	../kmeans_clustering.py	/^def createColorMap(X_cluster, K):$/;"	kind:function	line:73
createRGB	../read_multispectral.py	/^def createRGB(data, bands, lines, samples):$/;"	kind:function	line:45
cv2	../blending.py	/^import cv2$/;"	kind:namespace	line:1
cv2	../kmeans_clustering.py	/^import cv2$/;"	kind:namespace	line:3
cv2	../read_multispectral.py	/^import cv2$/;"	kind:namespace	line:10
data	../read_multispectral_cli.py	/^data = np.fromfile(sys.argv[1], '<f4').reshape((bands, lines * samples))$/;"	kind:variable	line:68
data_frame	../classifier.py	/^    data_frame = populateDataFrame(getData("..\/data\/"))$/;"	kind:variable	line:285
datasets	../classifier.py	/^from sklearn import svm, datasets$/;"	kind:namespace	line:9
elbow_method	../kmeans_clustering.py	/^def elbow_method(image_2d, max_k):$/;"	kind:function	line:87
elbow_method	../kmeans_clustering_cli.py	/^def elbow_method(image_2d, max_k):$/;"	kind:function	line:71
err	../read_multispectral_cli.py	/^def err(c):$/;"	kind:function	line:40
gdal	../kmeans_clustering.py	/^from osgeo import gdal, gdal_array$/;"	kind:namespace	line:6
gdal	../kmeans_clustering_cli.py	/^from osgeo import gdal, gdal_array$/;"	kind:namespace	line:12
gdal_array	../kmeans_clustering.py	/^from osgeo import gdal, gdal_array$/;"	kind:namespace	line:6
gdal_array	../kmeans_clustering_cli.py	/^from osgeo import gdal, gdal_array$/;"	kind:namespace	line:12
getCharacteristicValues	../read_multispectral.py	/^def getCharacteristicValues(headerFile):$/;"	kind:function	line:22
getData	../classifier.py	/^def getData(fp):$/;"	kind:function	line:29
getInputMatrix	../kmeans_clustering.py	/^def getInputMatrix(image_ds):$/;"	kind:function	line:42
getSample	../classifier.py	/^def getSample(data_frame, classes, undersample=True, normalize=True):$/;"	kind:function	line:171
get_image_2d	../kmeans_clustering_cli.py	/^def get_image_2d(filepath):$/;"	kind:function	line:58
headerImage	../read_multispectral.py	/^headerImage = image + ".hdr"$/;"	kind:variable	line:17
image	../kmeans_clustering.py	/^image = rawImagePath + imageName + imageExtension$/;"	kind:variable	line:19
image	../kmeans_clustering_cli.py	/^        image = sys.argv[1]$/;"	kind:variable	line:92
image	../read_multispectral.py	/^image = rawImagePath + "sentinel2"$/;"	kind:variable	line:15
imageExtension	../kmeans_clustering.py	/^imageExtension = ".bin"$/;"	kind:variable	line:17
imageName	../kmeans_clustering.py	/^imageName = "sentinel2"$/;"	kind:variable	line:16
imageio	../kmeans_clustering_cli.py	/^import imageio$/;"	kind:namespace	line:9
img	../blending.py	/^img = cv2.imread(convertPath + colorImage, cv2.IMREAD_COLOR)$/;"	kind:variable	line:10
img	../kmeans_clustering_cli.py	/^    img = np.zeros((img_ds.RasterYSize, img_ds.RasterXSize, img_ds.RasterCount),$/;"	kind:variable	line:112
img_ds	../kmeans_clustering_cli.py	/^    img_ds = gdal.Open(image, gdal.GA_ReadOnly)$/;"	kind:variable	line:111
init	../kmeans_clustering.py	/^init = 'k-means++'$/;"	kind:variable	line:24
k_means	../kmeans_clustering_cli.py	/^    k_means = KMeans(n_clusters=K)$/;"	kind:variable	line:121
kmeans_clustering.py	../kmeans_clustering.py	1;"	kind:file	line:1
kmeans_clustering_cli.py	../kmeans_clustering_cli.py	1;"	kind:file	line:1
mapImage	../blending.py	/^mapImage = "sentinel2_colorMap.png"$/;"	kind:variable	line:7
math	../kmeans_clustering.py	/^import math$/;"	kind:namespace	line:8
math	../kmeans_clustering_cli.py	/^import math$/;"	kind:namespace	line:14
matplotlib	../classifier.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:2
matplotlib	../kmeans_clustering.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:1
matplotlib	../kmeans_clustering_cli.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:7
matplotlib	../read_multispectral.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:9
matplotlib	../read_multispectral_cli.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:24
n_init	../kmeans_clustering.py	/^n_init = 10$/;"	kind:variable	line:25
n_jobs	../kmeans_clustering.py	/^n_jobs = -1$/;"	kind:variable	line:27
new_shape	../kmeans_clustering_cli.py	/^    new_shape = (img.shape[0] * img.shape[1], img.shape[2])$/;"	kind:variable	line:118
normalizeData	../classifier.py	/^def normalizeData(X):$/;"	kind:function	line:155
np	../classifier.py	/^import numpy as np$/;"	kind:namespace	line:1
np	../classifier.py	/^import numpy as np$/;"	kind:namespace	line:7
np	../kmeans_clustering.py	/^import numpy as np$/;"	kind:namespace	line:5
np	../kmeans_clustering_cli.py	/^import numpy as np$/;"	kind:namespace	line:11
np	../read_multispectral.py	/^import numpy as np$/;"	kind:namespace	line:7
np	../read_multispectral_cli.py	/^import numpy as np$/;"	kind:namespace	line:22
os	../classifier.py	/^import os$/;"	kind:namespace	line:3
os	../read_multispectral.py	/^import os.path as path$/;"	kind:namespace	line:8
os	../read_multispectral_cli.py	/^import os.path as path$/;"	kind:namespace	line:23
output	../blending.py	/^output = cv2.addWeighted(img, 1, cm, 0.5, 1)$/;"	kind:variable	line:12
outputClassifierMetrics	../classifier.py	/^def outputClassifierMetrics(y_test, y_pred):$/;"	kind:function	line:210
oversample	../classifier.py	/^def oversample(X, X_false):$/;"	kind:function	line:162
path	../read_multispectral.py	/^import os.path as path$/;"	kind:namespace	line:8
path	../read_multispectral_cli.py	/^import os.path as path$/;"	kind:namespace	line:23
pd	../classifier.py	/^import pandas as pd$/;"	kind:namespace	line:6
plot	../classifier.py	/^from rasterio import plot$/;"	kind:namespace	line:5
plt	../classifier.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:2
plt	../kmeans_clustering.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:1
plt	../kmeans_clustering_cli.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:7
plt	../read_multispectral.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:9
plt	../read_multispectral_cli.py	/^import matplotlib.pyplot as plt$/;"	kind:namespace	line:24
populateDataFrame	../classifier.py	/^def populateDataFrame(rasterBin, show=False):$/;"	kind:function	line:42
rasterio	../classifier.py	/^import rasterio$/;"	kind:namespace	line:4
rawImagePath	../kmeans_clustering.py	/^rawImagePath = "..\/images\/raw\/"$/;"	kind:variable	line:14
rawImagePath	../read_multispectral.py	/^rawImagePath = "..\/images\/raw\/"$/;"	kind:variable	line:13
readRasterImage	../kmeans_clustering.py	/^def readRasterImage(image):$/;"	kind:function	line:36
read_hdr	../read_multispectral_cli.py	/^def read_hdr(hdr):$/;"	kind:function	line:27
read_multispectral.py	../read_multispectral.py	1;"	kind:file	line:1
read_multispectral_cli.py	../read_multispectral_cli.py	1;"	kind:file	line:1
rgb	../read_multispectral_cli.py	/^rgb = np.zeros((samples, lines, 3))$/;"	kind:variable	line:73
run	../kmeans_clustering.py	/^def run():$/;"	kind:function	line:104
run	../read_multispectral.py	/^def run():$/;"	kind:function	line:83
runKMeans	../kmeans_clustering.py	/^def runKMeans(K, X, image):$/;"	kind:function	line:56
run_kmeans	../kmeans_clustering_cli.py	/^def run_kmeans(filepath, k):$/;"	kind:function	line:37
showImage	../kmeans_clustering.py	/^def showImage(filepath):$/;"	kind:function	line:30
showImage	../read_multispectral.py	/^def showImage(data):$/;"	kind:function	line:54
show_image	../kmeans_clustering_cli.py	/^def show_image(filepath):$/;"	kind:function	line:26
svm	../classifier.py	/^from sklearn import svm, datasets$/;"	kind:namespace	line:9
sys	../kmeans_clustering.py	/^import sys$/;"	kind:namespace	line:7
sys	../kmeans_clustering_cli.py	/^import sys$/;"	kind:namespace	line:13
sys	../read_multispectral.py	/^import sys$/;"	kind:namespace	line:6
sys	../read_multispectral_cli.py	/^import sys$/;"	kind:namespace	line:21
t	../read_multispectral.py	/^import time as t$/;"	kind:namespace	line:11
time	../kmeans_clustering.py	/^import time$/;"	kind:namespace	line:9
train	../classifier.py	/^def train(X, y):$/;"	kind:function	line:227
train_test_split	../classifier.py	/^from sklearn.model_selection import train_test_split$/;"	kind:namespace	line:10
train_test_split	../classifier.py	/^from sklearn.model_selection import train_test_split$/;"	kind:namespace	line:13
uniqueTimeString	../read_multispectral.py	/^def uniqueTimeString():$/;"	kind:function	line:66
unique_labels	../classifier.py	/^from sklearn.utils.multiclass import unique_labels$/;"	kind:namespace	line:12
writeImage	../read_multispectral.py	/^def writeImage(data):$/;"	kind:function	line:73
